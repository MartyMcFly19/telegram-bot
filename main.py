import telebot
import sqlite3
import random
import os
import shutil
from datetime import datetime
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '6122431243:AAEN3UVYQSnW22yB3j7PXKStpyUgeryGedA'
bot = telebot.TeleBot(TOKEN)
jokes = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã —Ç–∞–∫ –Ω–µ –ª—é–±—è—Ç –º–æ—Ä–µ? –ü–æ—Ç–æ–º—É —á—Ç–æ –≤ –Ω–µ–º –Ω–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞!",
    "–ö–∞–∫–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ò–ª–æ–Ω–æ–º –∏ Android? –û–¥–∏–Ω —Ä–æ–±–æ—Ç, –¥—Ä—É–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∫–∞.",
    "–ö–∞–∫–æ–π —Å–∞–º—ã–π —Ç—Ä—É–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞? –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Å—Ç—å? ",
    "–ü–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ: —Å–ø–∞—Ç—å –¥–æ –æ–±–µ–¥–∞. –†–µ–∞–ª—å–Ω–æ—Å—Ç—å: –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è –≤ 6 —É—Ç—Ä–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–±–µ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.",
    "–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å: –±—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º. –†–µ–∞–ª—å–Ω–æ—Å—Ç—å: –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–µ–º—ã –≤–µ—Å—å –¥–µ–Ω—å ", "–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –±—ã—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç–µ. –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞: –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –ª–µ—Å—Ç–Ω–∏—Ü—É ",
    "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –≤—Å—Ç–∞–≤–ª—è–µ—à—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞, –∞ –ø–æ—Ç–æ–º –Ω–µ–¥–µ–ª—è –ø—Ä–æ—Ö–æ–¥–∏—Ç, –∏ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—à—å.",
    "–Ø —Å–¥–µ–ª–∞–ª –ø–ª–∞–Ω, —á—Ç–æ–±—ã —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–ª–∞–Ω—É, –Ω–æ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –∏ —Ç–µ–ø–µ—Ä—å —É –º–µ–Ω—è –Ω–æ–≤—ã–π –ø–ª–∞–Ω, —á—Ç–æ–±—ã —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —ç—Ç–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏. ",
    "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –ø—á–µ–ª–∞ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ? –ñ—É–∂–∂–∏—Ç –Ω–∞ –±–µ–≥–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–µ! ",
    "–ö–∞–∫–æ–π –∫–ª—é—á –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–≤–µ—Ä—å –≤ –±—É–¥—É—â–µ–µ? –¢–µ–ª–µ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏–π. ",
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('plans.db')  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É plans, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS plans (
            user_id INTEGER,
            day TEXT,
            plan TEXT,
            PRIMARY KEY (user_id, day)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reviews (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            first_name TEXT,
            last_name TEXT,
            review_text TEXT
        )
    ''')
    cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                days_created INTEGER DEFAULT 0
            )
        ''')
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–æ–≤—ã–π –ø–ª–∞–Ω" –∏ "–ú–æ–∏ –ø–ª–∞–Ω—ã"
    markup = telebot.types.InlineKeyboardMarkup()
    new_plan_button = telebot.types.InlineKeyboardButton(text="üìù –ù–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="new_plan")  # –í–æ—Ç –∑–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    my_plans_button = telebot.types.InlineKeyboardButton(text="üìÖ –ú–æ–∏ –ø–ª–∞–Ω—ã", callback_data="my_plans")
    leave_review_button = telebot.types.InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")
    markup.add(new_plan_button, my_plans_button, leave_review_button)

    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç Planerka –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å –≤–∞—à–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏!üòä\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'new_plan')
def new_plan_callback(call):
    user_id = call.from_user.id
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å:")
    bot.register_next_step_handler(msg, process_day_step)

def process_day_step(message):
    user_id = message.from_user.id
    day = message.text

    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –ø–ª–∞–Ω—ã:")
    bot.register_next_step_handler(msg, lambda msg: process_plan_step(user_id, day, msg))

def process_plan_step(user_id, day, message):
    plan = message.text

    conn = sqlite3.connect('plans.db')
    cursor = conn.cursor()

    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É plans + —Å—á–∏—Ç–∞–µ–º –¥–Ω–∏
    cursor.execute('INSERT OR REPLACE INTO plans (user_id, day, plan) VALUES (?, ?, ?)', (user_id, day, plan))
    cursor.execute('UPDATE users SET days_created = days_created + 1 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

    markup = telebot.types.InlineKeyboardMarkup()
    view_plans_button = telebot.types.InlineKeyboardButton(text="üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø–ª–∞–Ω—ã", callback_data="my_plans")
    markup.add(view_plans_button)

    bot.send_message(user_id, "‚úÖ  –ü–ª–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø–ª–∞–Ω—ã"
@bot.callback_query_handler(func=lambda call: call.data == 'my_plans')
def my_plans_callback(call):
    user_id = call.from_user.id

    conn = sqlite3.connect('plans.db')
    cursor = conn.cursor()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT day, plan FROM plans WHERE user_id = ?', (user_id,))
        user_plans = cursor.fetchall()

        conn.close()

        if user_plans:
            plans_text = "üìî –í–∞—à–∏ –ø–ª–∞–Ω—ã: üìî\n"
            for day, plan in user_plans:
                plans_text += f"{day} : {plan}\n"
        else:
            plans_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤."

        markup = telebot.types.InlineKeyboardMarkup()
        return_button = telebot.types.InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="return_to_start")
        delete_plans_button = telebot.types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="delete_plans")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        markup.add(return_button, delete_plans_button)
        bot.send_message(user_id, plans_text, reply_markup=markup)
    except sqlite3.Error as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞:", e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è"
@bot.callback_query_handler(func=lambda call: call.data == 'return_to_start')
def return_to_start_callback(call):
    user_id = call.from_user.id

    markup = telebot.types.InlineKeyboardMarkup()
    new_plan_button = telebot.types.InlineKeyboardButton(text="üìù –ù–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="new_plan")
    view_plans_button = telebot.types.InlineKeyboardButton(text="üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø–ª–∞–Ω—ã", callback_data="my_plans")  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    leave_review_button = telebot.types.InlineKeyboardButton(text=" –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")
    markup.add(new_plan_button, view_plans_button, leave_review_button)  # –î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É

    bot.send_message(user_id, "–ë–æ—Ç Planerka –≤–Ω–æ–≤—å –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å –≤–∞—à–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏!", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'delete_plans')
def delete_plans_callback(call):
    user_id = call.from_user.id

    conn = sqlite3.connect('plans.db')
    cursor = conn.cursor()

    # –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('DELETE FROM plans WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

    markup = telebot.types.InlineKeyboardMarkup()
    new_plan_button = telebot.types.InlineKeyboardButton(text="üìÖ –ù–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="new_plan")
    view_plans_button = telebot.types.InlineKeyboardButton(text="üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø–ª–∞–Ω—ã", callback_data="my_plans")
    markup.add(new_plan_button, view_plans_button)
    bot.send_message(user_id, "‚úÖ  –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'leave_review')
def leave_review_callback(call):
    user_id = call.from_user.id
    msg = bot.send_message(user_id, "–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ Planerka, –∞ —Ç–∞–∫–∂–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –≤–∞—à–∏ –≤–∑–≥–ª—è–¥—ã –Ω–∞ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç:")
    bot.register_next_step_handler(msg, process_review_step)

def process_review_step(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name if message.from_user.last_name else ""
    review_text = message.text

    conn = sqlite3.connect('plans.db')
    cursor = conn.cursor()

    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ —Ç–∞–±–ª–∏—Ü—É reviews
    cursor.execute('INSERT INTO reviews (user_id, first_name, last_name, review_text) VALUES (?, ?, ?, ?)',
                   (user_id, first_name, last_name, review_text))
    conn.commit()
    conn.close()

    markup = telebot.types.InlineKeyboardMarkup()
    return_button = telebot.types.InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="return_to_start")
    markup.add(return_button)
    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", reply_markup=markup)
@bot.message_handler(commands=['reviews'])
def read_reviews(message):
    if message.from_user.id == 1873139768:
        conn = sqlite3.connect('plans.db')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
        cursor.execute('SELECT user_id, first_name, last_name, review_text FROM reviews')
        all_reviews = cursor.fetchall()

        conn.close()

        if all_reviews:
            reviews_text = "–û—Ç–∑—ã–≤—ã:\n"
            for user_id, first_name, last_name, review_text in all_reviews:
                user_name = f"{first_name} {last_name}" if last_name else first_name
                reviews_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}):\n{review_text}\n\n"
        else:
            reviews_text = "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤."

        bot.send_message(message.chat.id, reviews_text)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–∑—ã–≤–∞–º.")

@bot.message_handler(commands=['check_days'])
def check_days(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('plans.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    cursor.execute('SELECT COUNT(DISTINCT day) FROM plans WHERE user_id = ?', (user_id,))
    days_created = cursor.fetchone()[0]


    markup = telebot.types.InlineKeyboardMarkup()
    return_button = telebot.types.InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="return_to_start")
    markup.add(return_button)

    if days_created >= 7:
        bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ, —É –≤–∞—Å –µ—Å—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ 7 –¥–Ω–µ–π! üéâ", reply_markup=markup)
        random_joke = random.choice(jokes)
        bot.send_message(user_id, random_joke)
    else:
        bot.send_message(user_id, f"–£ –≤–∞—Å –µ—Å—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:  {days_created} . ", reply_markup=markup)

    conn.close()

@bot.message_handler(commands=['say_everyone'])
def ask_admin_message(message):
    user_id = message.from_user.id
    if user_id == 1873139768:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        bot.register_next_step_handler(message, process_admin_message)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

def process_admin_message(message):
    admin_message = message.text
    conn = sqlite3.connect('plans.db')
    cursor = conn.cursor()

    cursor.execute('SELECT user_id FROM users')
    all_users = cursor.fetchall()
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–ª—É—á–∏–≤—à–∏–µ —Ä–µ–∫–ª–∞–º—É: ", all_users)
    conn.close()

    for user in all_users:
        try:
            bot.send_message(user[0], admin_message)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)
    print('–°–æ–æ–±—â–µ–Ω–∏–µ(—Ä–µ–∫–ª–∞–º–∞_—Ç–µ–∫—Å—Ç): ',admin_message)
    bot.send_message(message.from_user.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")

@bot.message_handler(commands=['image_everyone'])
def ask_admin_image(message):
    user_id = message.from_user.id
    if user_id == 1873139768:
        bot.send_message(user_id, "–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        bot.register_next_step_handler(message, process_admin_image)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
def process_admin_image(message):
    admin_image = message.photo[-1].file_id
    conn = sqlite3.connect('plans.db')
    cursor = conn.cursor()

    cursor.execute('SELECT user_id FROM users')
    all_users = cursor.fetchall()

    conn.close()

    for user in all_users:
        bot.send_photo(user[0], admin_image)

    bot.send_message(message.from_user.id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")

@bot.message_handler(commands=['backup'])
def create_backup(message):
    user_id = message.from_user.id
    if user_id == 1873139768:
        backup_folder = 'backup'
        os.makedirs(backup_folder, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É backup, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç

        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        backup_filename = f'{backup_folder}/plans_backup_{timestamp}.db'

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            shutil.copy('plans.db', backup_filename)
            bot.send_message(user_id, "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        except Exception as e:
            bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
@bot.message_handler(commands=['cooperation'])
def coop(message):
    markup = telebot.types.InlineKeyboardMarkup()
    return_button = telebot.types.InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="return_to_start")
    markup.add(return_button)
    bot.send_message(message.chat.id, "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ —Ä–µ–∫–ª–∞–º—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\nartemnkia@gmail.com", reply_markup=markup)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)